create table bricks (
  brick_id integer,
  colour   varchar2(10),
  shape    varchar2(10),
  weight   integer
);

insert into bricks values ( 1, 'blue', 'cube', 1 );
insert into bricks values ( 2, 'blue', 'pyramid', 2 );
insert into bricks values ( 3, 'red', 'cube', 1 );
insert into bricks values ( 4, 'red', 'cube', 2 );
insert into bricks values ( 5, 'red', 'pyramid', 3 );
insert into bricks values ( 6, 'green', 'pyramid', 1 );

commit;


SELECT * FROM BRICKS;

/* corelated subquery to fetch */
SELECT B.BRICK_ID,B.COLOUR,
(SELECT COUNT(COLOUR) FROM BRICKS WHERE COLOUR=B.COLOUR GROUP BY COLOUR) AS COUNT_BRICKS
FROM BRICKS B

SELECT B.BRICK_ID,B.COLOUR,B.WEIGHT,
(SELECT COUNT(COLOUR) FROM BRICKS WHERE COLOUR=B.COLOUR GROUP BY COLOUR) AS COUNT_BRICKS,
(SELECT SUM(WEIGHT) FROM BRICKS WHERE COLOUR=B.COLOUR GROUP BY COLOUR) AS TOTAL_WEIGHT_BRICKS
FROM BRICKS B

SELECT B.BRICK_ID,B.COLOUR,B.WEIGHT,B.SHAPE,
(SELECT COUNT(COLOUR) FROM BRICKS WHERE COLOUR=B.COLOUR GROUP BY COLOUR) AS COUNT_BRICKS,
(SELECT SUM(WEIGHT) FROM BRICKS WHERE COLOUR=B.COLOUR GROUP BY COLOUR) AS TOTAL_WEIGHT_BRICKS,
(SELECT SUM(WEIGHT) FROM BRICKS WHERE SHAPE=B.SHAPE GROUP BY SHAPE) AS TOTAL_WEIGHT_BRICKS
FROM BRICKS B


/*ANALYTIC FUNCTION TABLE PARTIONING USING  OVER CLAUSE  */

SELECT * FROM BRICKS;

SELECT B.* FROM BRICKS B

SELECT B.*, 
COUNT(*) OVER()AS COUNT_TOTAL_BRICKS,
COUNT(*) OVER(PARTITION BY COLOUR) AS COUNT_BY_COLOUR
FROM BRICKS B

SELECT B.*, 
MAX(BRICK_ID) OVER(PARTITION BY SHAPE )AS MAX_BRICK_ID_SHAPE
FROM BRICKS B


SELECT B.*, 
-- COUNT(*) OVER()AS COUNT_TOTAL_BRICKS,
COUNT(COLOUR) OVER(PARTITION BY COLOUR) AS COUNT_BY_COLOUR
FROM BRICKS B

SELECT B.*, 
-- COUNT(SHAPE) OVER(PARTITION BY COLOUR)AS PARTISION_SHAPE,
SUM(WEIGHT) OVER(ORDER BY COLOUR) AS COUNT_BY_SHAPE
FROM BRICKS B

SELECT B.*,
SUM (BRICK_ID) OVER( ORDER BY SHAPE ) AS COUNT_ON_SHAPE_BRICK_ID
FROM BRICKS B

SELECT B.*, 
MAX(BRICK_ID) OVER(PARTITION BY SHAPE )AS MAX_BRICK_ID_SHAPE
FROM BRICKS B













